# MediaPipe graph that performs iris tracking with TensorFlow Lite on GPU.
# Used in the examples in
# mediapipie/examples/android/src/java/com/mediapipe/apps/iristrackinggpu and

# GPU buffer. (GpuBuffer)
input_stream: "input_video"

# GPU buffer. (GpuBuffer)
output_stream: "output_video"

# smoothed facemesh points
output_stream: "face_landmarks"  # aya: used to be face_landmarks_smooth

# output pose landmarks
output_stream: "pose_landmarks"

# pose Segmentation Mask
output_stream: "segmentation_mask"

######################################
# Pose tracking Inputs
#####################################

# Whether to predict the segmentation mask. If unspecified, functions as set to
# false. (bool)
# input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"

# Whether landmarks on the previous image should be used to help localize
# landmarks on the current image. (bool)
# input_side_packet: "USE_PREV_LANDMARKS:use_prev_landmarks"

# Whether to filter segmentation mask across different input images to reduce
# jitter. If unspecified, functions as set to true. (bool)
# input_side_packet: "SMOOTH_SEGMENTATION:smooth_segmentation"


# Whether to filter landmarks across different input images to reduce jitter.
# If unspecified, functions as set to true. (bool)
# input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"

# Complexity of the pose landmark model: 0, 1 or 2. Landmark accuracy as well as
# inference latency generally go up with the model complexity. If unspecified,
# functions as set to 1. (int)
# input_side_packet: "MODEL_COMPLEXITY:model_complexity"


######################################
# Graph
#####################################


# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.FlowLimiterCalculatorOptions] {
      max_in_flight: 1
      max_in_queue: 1
      # Timeout is disabled (set to 0) as first frame processing can take more
      # than 1 second.
      in_flight_timeout: 0
    }
  }
}


# Defines how many faces to detect. Iris tracking currently only handles one
# face (left and right eye), and therefore this should always be set to 1.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:num_faces"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }
    }
  }
}


node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:model_complexity"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 0 }
    }
  }
}


node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:enable_segmentation"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { bool_value:true }
    }
  }
}


# -----------------------------#
# Face Tracking
# -----------------------------#


node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  output_stream: "SIZE:input_image_size"
}

# Detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  # input_side_packet: "WITH_ATTENTION:with_attention"  # todo aya make constnat side packet
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"
  output_stream: "DETECTIONS:face_detections"
  output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"
}

# Gets the very first and only face from "multi_face_landmarks" vector.
node {
  calculator: "SplitNormalizedLandmarkListVectorCalculator"
  input_stream: "multi_face_landmarks"
  output_stream: "face_landmarks"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 0 end: 1 }
      element_only: true
    }
  }
}


# Converts landmarks to drawing primitives for annotation overlay.
node {
  calculator: "FaceLandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:face_landmarks" # aya used to be face_landmarks_smooth
  output_stream: "RENDER_DATA:landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 255 g: 0 b: 0 }
      connection_color { r: 0 g: 255 b: 0 }
      thickness: 1
      visualize_landmark_depth: true
      min_depth_circle_thickness: 1
      max_depth_circle_thickness: 3
      min_depth_line_color { r: 0 g: 0 b: 0 }
      max_depth_line_color { r: 0 g: 0 b: 255 }
    }
  }
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video" # throttled_input_video2"
  input_stream: "landmarks_render_data"
  output_stream: "IMAGE_GPU:output_video"  # todo aya fix this
}



#node {
#  calculator: "ConcatenateNormalizedLandmarkListCalculator"
#  input_stream: "face_landmarks" # aya used to be face_landmarks_smooth
#  input_stream: "face_landmarks" # "iris_landmarks"
#  output_stream: "face_landmarks_with_iris"
#}






# -----------------------------#
# Pose tracking
# -----------------------------#


##throttles the Pose becuase we don't need 30 fps
node {
  calculator: "PacketResamplerCalculator"
  input_stream: "DATA:throttled_input_video"
  output_stream: "DATA:throttled_out_video2"
  node_options: {
    [type.googleapis.com/mediapipe.PacketResamplerCalculatorOptions] {
      frame_rate: 5.0
    }
  }
}


node {
  calculator: "PoseLandmarkGpu"
  input_stream: "IMAGE:throttled_input_video" # throttled_out_video2"
  input_side_packet: "MODEL_COMPLEXITY:model_complexity"
  input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"
  #input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"
  #input_side_packet: "SMOOTH_SEGMENTATION:smooth_segmentation"
  #input_side_packet: "USE_PREV_LANDMARKS:use_prev_landmarks"
  output_stream: "LANDMARKS:pose_landmarks"
  output_stream: "SEGMENTATION_MASK:segmentation_mask"
  #output_stream: "SEGMENTATION_MASK:segmentation_mask_cpu"
  output_stream: "DETECTION:pose_detection" # necessary for display
  output_stream: "ROI_FROM_LANDMARKS:roi_from_landmarks" # necessary for display
}

#node {
#   calculator: "GpuBufferToImageFrameCalculator"
#   input_stream: "segmentation_mask"
#   output_stream: "segmentation_mask_cpu"
#}


 # Subgraph that renders pose-landmark annotation onto the input image.
#node {
#  calculator: "PoseRendererGpu"
#  input_stream: "IMAGE:throttled_input_video" #throttled_input_video2"
#  input_stream: "LANDMARKS:pose_landmarks"
#  input_stream: "SEGMENTATION_MASK:segmentation_mask_cpu"
#  input_stream: "DETECTION:pose_detection"
#  input_stream: "ROI:roi_from_landmarks"
#  output_stream: "IMAGE:throttled_input_video2"
#}
