# MediaPipe graph that performs face mesh with TensorFlow Lite on GPU.

# GPU buffer. (GpuBuffer)
input_stream: "input_video"

# Max number of faces to detect/process. (int)
#input_side_packet: "num_faces"

input_side_packet: "with_attention"


# Complexity of the pose landmark model: 0, 1 or 2. Landmark accuracy as well as
# inference latency generally go up with the model complexity. If unspecified,
# functions as set to 1. (int)
input_side_packet: "MODEL_COMPLEXITY:model_complexity"

# Whether to filter landmarks across different input images to reduce jitter.
# If unspecified, functions as set to true. (bool)
input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"

# Whether to predict the segmentation mask. If unspecified, functions as set to
# false. (bool)
input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"

# Whether to filter segmentation mask across different input images to reduce
# jitter. If unspecified, functions as set to true. (bool)
input_side_packet: "SMOOTH_SEGMENTATION:smooth_segmentation"

# Whether to run the face landmark model with attention on lips and eyes to
# provide more accuracy, and additionally output iris landmarks. If unspecified,
# functions as set to false. (bool)
input_side_packet: "REFINE_FACE_LANDMARKS:refine_face_landmarks"

# Whether landmarks on the previous image should be used to help localize
# landmarks on the current image. (bool)
input_side_packet: "USE_PREV_LANDMARKS:use_prev_landmarks"

# Output image with rendered results. (GpuBuffer)
output_stream: "output_video"

#RGB image used for HR Calculations
output_stream: "throttled_input_video_cpu"

#pose landmarks
output_stream: "pose_landmarks"

#pose Segmentation Mask
output_stream: "segmentation_mask_cpu"

#RGB image used for RR Calulations
output_stream: "throttled_input_video_cpu2"


#smoothed facemesh points
output_stream: "face_landmarks_smooth"




# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:landmarks_render_data"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.FlowLimiterCalculatorOptions] {
      max_in_flight: 1
      max_in_queue: 1
      # Timeout is disabled (set to 0) as first frame processing can take more
      # than 1 second.
      in_flight_timeout: 0
    }
  }
}








#Face Tracking
#####################################


node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  output_stream: "SIZE:input_image_size"
}


# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "WITH_ATTENTION:with_attention"
  input_side_packet: "NUM_FACES:num_faces"
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "DETECTIONS:face_detections"
}



# the graph tries to detect multiple faces so we need to pull out the 1 face
node {
  calculator: "SplitNormalizedLandmarkListVectorCalculator"
  input_stream: "multi_face_landmarks"
  output_stream: "face_landmarks"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 0 end: 1 }
      element_only: true
    }
  }
}

#stabalizes the face landmarks
node {
  calculator: "LandmarksSmoothingCalculator"
  input_stream: "NORM_LANDMARKS:face_landmarks"
  input_stream: "IMAGE_SIZE:input_image_size"
  output_stream: "NORM_FILTERED_LANDMARKS:face_landmarks_smooth"
  options: {
    [mediapipe.LandmarksSmoothingCalculatorOptions.ext] {
      one_euro_filter {
              min_cutoff: 0.05
	      # Min cutoff 0.1 results into ~0.01 alpha in landmark EMA filter
              # when landmark is static.
              beta: 40.0
              # Beta 80.0 in combintation with min_cutoff 0.05 results into
              # ~0.94 alpha in landmark EMA filter when landmark is moving fast
              derivate_cutoff: 1.0
              # Derivative cutoff 1.0 results into ~0.17 alpha in landmark
              # velocity EMA filter.
            }
    }
  }
}



#gets the BGR frame to the cpu to grab the image
node {
   calculator: "GpuBufferToImageFrameCalculator"
   input_stream: "throttled_input_video"
   output_stream: "throttled_input_video_cpu"
 }




######################################


#Pose tracking
#####################################


##throttles the Pose becuase we don't need 30 fps
node {
  calculator: "PacketResamplerCalculator"
  input_stream: "DATA:throttled_input_video"
  output_stream: "DATA:throttled_out_video2"
  node_options: {
    [type.googleapis.com/mediapipe.PacketResamplerCalculatorOptions] {
      frame_rate: 5.0
    }
  }
}


node {
  calculator: "PoseLandmarkGpu"
  input_stream: "IMAGE:throttled_out_video2"
  input_side_packet: "MODEL_COMPLEXITY:model_complexity"
  input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"
  input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"
  input_side_packet: "SMOOTH_SEGMENTATION:smooth_segmentation"
  input_side_packet: "USE_PREV_LANDMARKS:use_prev_landmarks"
  output_stream: "LANDMARKS:pose_landmarks"
  output_stream: "SEGMENTATION_MASK:segmentation_mask_cpu"
}


#node {
#   calculator: "GpuBufferToImageFrameCalculator"
#   input_stream: "segmentation_mask"
#   output_stream: "segmentation_mask_cpu"
# }



##throttle the RGB Data for RR
node {
  calculator: "PacketResamplerCalculator"
  input_stream: "DATA:throttled_input_video_cpu"
  output_stream: "DATA:throttled_input_video_cpu2"
  node_options: {
    [type.googleapis.com/mediapipe.PacketResamplerCalculatorOptions] {
      frame_rate: 5.0
    }
  }
}



#####################################


# Display 
#######################################


# Converts landmarks to drawing primitives for annotation overlay.
node {
  calculator: "FaceLandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:face_landmarks_smooth"
  output_stream: "RENDER_DATA:landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 255 g: 0 b: 0 }
      connection_color { r: 0 g: 255 b: 0 }
      thickness: 1
      visualize_landmark_depth: true
      min_depth_circle_thickness: 1
      max_depth_circle_thickness: 3
      min_depth_line_color { r: 0 g: 0 b: 0 }
      max_depth_line_color { r: 0 g: 0 b: 255 }
    }
  }
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  input_stream: "landmarks_render_data"
  output_stream: "IMAGE_GPU:output_video"
}


#######################################




























